/*
1. The `isPredecessor` function checks if `word2` is one character removal away from `word1`.
2. Words are sorted by length to ensure that shorter words are processed first.
3. A hash map `dp` tracks the maximum chain length ending with each word.
4. For each word, possible predecessors are generated by removing one character.
5. If a predecessor exists in `dp`, the chain length for the word is updated.
6. The maximum chain length, `maxLength`, is updated during the process.
7. The function returns `maxLength`, representing the longest chain length.
*/

class Solution {
  public:
  
    bool isPredecessor(const string &word1, const string &word2) {
    if (word1.length() != word2.length() + 1) return false;
    int i = 0, j = 0;
    while (i < word1.length()) {
        if (j < word2.length() && word1[i] == word2[j]) {
            j++;
        }
        i++;
    }
    return j == word2.length();
    }
    
    int longestStringChain(vector<string>& words) {
        // Code here
        sort(words.begin(), words.end(), [](const string &a, const string &b) {
            return a.length() < b.length();
        });
    
        unordered_map<string, int> dp;
        int maxLength = 1;
    
        for (string word : words) {
            dp[word] = 1;
            for (int i = 0; i < word.length(); i++) {
                string predecessor = word.substr(0, i) + word.substr(i + 1);
                if (dp.find(predecessor) != dp.end()) {
                    dp[word] = max(dp[word], dp[predecessor] + 1);
                }
            }
            maxLength = max(maxLength, dp[word]);
        }
        return maxLength;
    }
};